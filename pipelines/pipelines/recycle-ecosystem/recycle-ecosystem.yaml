#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: recycle-ecosystem
  namespace: galasa-build
spec:
#
#
#
  params:
  - name: ecosystemNamespace
    type: string
    default: galasa-prod
#
#
#
  tasks:
#
#
#
  - name: recycle-api
    taskRef:
      name: kubectl
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/api
  - name: wait-api
    taskRef:
      name: kubectl
    runAfter:
    - recycle-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/api
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-testcatalog
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/testcatalog
  - name: wait-testcatalog
    taskRef:
      name: kubectl
    runAfter:
    - recycle-testcatalog
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/testcatalog
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-engine-controller
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/engine-controller
  - name: wait-engine-controller
    taskRef:
      name: kubectl
    runAfter:
    - recycle-engine-controller
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/engine-controller
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-resource-monitor
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/resource-monitor
  - name: wait-resource-monitor
    taskRef:
      name: kubectl
    runAfter:
    - recycle-resource-monitor
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/resource-monitor
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-metrics
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/metrics
  - name: wait-metrics
    taskRef:
      name: kubectl
    runAfter:
    - recycle-metrics
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/metrics
        - -w
        - --timeout=3m

  finally:
  - name: report-failed-build
    when:
      - input: "$(tasks.status)"
        operator: in
        values: ["Failed"]
    taskRef:
      name: slack-post
    params:
    - name: pipelineName
      value: $(context.pipeline.name)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)