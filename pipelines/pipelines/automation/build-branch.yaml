#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-automation
  namespace: galasa-build
spec:
  params:
  - name: branch
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  workspaces:
  - name: git-workspace
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: $(params.branch)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: automation
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: go-build-ghverify
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-verify
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghverify
      - cmd/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: build-ghverify-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghverify
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-verify
    - name: dockerfilePath
      value: automation/dockerfiles/common/ghverify-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghverify:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: go-build-ghstatus
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-status
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghstatus
      - cmd/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: build-ghstatus-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghstatus
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-status
    - name: dockerfilePath
      value: automation/dockerfiles/common/ghstatus-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghstatus:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  # Build a tool which monitors github for webhook events which have previously
  # been delivered, and kick-off an internal pipeline to handle them.
  - name: go-build-ghmonitor
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-monitor
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghmonitor
      - cmd/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  
  - name: build-ghmonitor-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghmonitor
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-monitor
    - name: dockerfilePath
      value: automation/dockerfiles/common/github-monitor-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghmonitor:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  


  # A tool which is called by the webhook, responds OK, and 
  # tells a pull request that a build is 'pending...'
  - name: go-build-ghreceiver
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-receiver
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghreceiver
      - cmd/github-webhook-receiver/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: build-ghreceiver-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghreceiver
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-receiver
    - name: dockerfilePath
      value: automation/dockerfiles/common/github-receiver-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghreceiver:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  
   

  - name: build-gpg-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/gpg-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/gpg:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: build-kubectl-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/kubectl-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/kubectl:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: build-gitcli-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    - build-gpg-image
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/gitcli-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/gitcli:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  

  - name: build-tkn-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/tkn-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/tkn:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  

  - name: build-openapi-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/openapi-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/openapi:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # finally:
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace
