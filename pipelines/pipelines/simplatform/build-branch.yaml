#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-simplatform
  namespace: galasa-build
spec:
  params:
  - name: fromBranch
    type: string
    default: main
  - name: toBranch
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-simplatform
  workspaces:
  - name: git-workspace
# 
# 
# 
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: clone-simplatform
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/simplatform
    - name: revision
      value: main
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/simplatform
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: check-branch
    taskRef: 
      name: git-check-branch
    runAfter:
    - clone-simplatform  
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace  
# 
# 
#      
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-simplatform
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: simplatform
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-maven-build-simplatform-application
    taskRef:
      name: maven-build
    runAfter:
    - clone-simplatform
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/simplatform/settings.xml
    - name: buildArgs
      value:
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/simplatform/repo"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-maven-build-simbank-tests
    taskRef:
      name: maven-build
    runAfter:
    - branch-maven-build-simplatform-application
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simbank-tests
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/simplatform/settings.xml
    - name: buildArgs
      value:
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/simplatform/repo"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-docker-build-simplatform-repo
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-maven-build-simbank-tests
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/simplatform
    - name: dockerfilePath
      value: automation/dockerfiles/simplatform/simplatform-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-simplatform:$(params.imageTag)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=branch=$(params.toBranch)"
    workspaces:
      - name: git-workspace
        workspace: git-workspace
# 
# 
# 
  - name: branch-docker-build-simplatform-jar
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-docker-build-simplatform-repo
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application/galasa-simplatform-3270
    - name: dockerfilePath
      value: automation/dockerfiles/simplatform/simplatform-amd64-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-simplatform-amd64:$(params.imageTag)
    - name: noPush
      value: ""
    workspaces:
      - name: git-workspace
        workspace: git-workspace
# 
# 
# 
  - name: recycle-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-simplatform-repo
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - simplatform-$(params.imageTag)
# 
# 
# 
  - name: wait-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:simplatform-$(params.imageTag)
      - --health
# 
# 
# 
  # Trigger snapshot-simplatform (main to prod) when doing a Main Build
  - name: snapshot-simplatform
    when:
      - input: "$(params.toBranch)"
        operator: in
        values: ["main"]
    taskRef:
      name: tkn-cli
    runAfter:
    - wait-deployment
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation
    - name: command
      value: 
      - pipeline
      - start
      - snapshot-simplatform
      - -n
      - galasa-build
      - --prefix-name 
      - trigger-snapshot-simplatform-
      - --use-param-defaults
      - --workspace
      - name=git-workspace,volumeClaimTemplateFile=./pipelines/templates/git-workspace-template.yaml
      - --pod-template
      - ./pipelines/templates/pod-template.yaml
      - --serviceaccount
      - galasa-build-bot
    workspaces:
     - name: git-workspace
       workspace: git-workspace      

  finally:
  - name: report-failed-build
    when:
      - input: "$(tasks.status)"
        operator: in
        values: ["Failed"]
    taskRef:
      name: slack-post
    params:
    - name: repo
      value: "simplatform"
    - name: pipelineRunName
      value: $(context.pipelineRun.name)