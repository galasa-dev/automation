#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-simplatform
  namespace: galasa-build
spec:
  params:
  - name: fromBranch
    type: string
    default: main
  - name: toBranch
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  workspaces:
  - name: git-workspace
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-simplatform
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/simplatform
    - name: revision
      value: $(params.toBranch)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/simplatform
    workspaces:
     - name: output
       workspace: git-workspace
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-simplatform
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: simplatform
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  
  # Current Simplatform pipeline does not have maven-gpg equivalent
  # - name: maven-gpg
  #   taskRef:
  #     name: maven-gpg
  #   runAfter:
  #   - clone-simplatform 
  #   params:
  #   - name: context
  #     value: $(context.pipelineRun.name)/simplatform
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace

  - name: branch-maven-build-simplatform-application
    taskRef:
      name: maven-build
    runAfter:
    # - maven-gpg
    - clone-simplatform
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/simplatform/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/simplatform/repo"
    - name: command
      value: deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: branch-maven-build-simbank-tests
    taskRef:
      name: maven-build
    runAfter:
    - branch-maven-build-simplatform-application
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simbank-tests
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/simplatform/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/simplatform/repo"
    - name: command
      value: deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: branch-docker-build-simplatform-repo
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-maven-build-simbank-tests
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/simplatform
    - name: dockerfilePath
      value: automation/dockerfiles/simplatform/simplatform-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-simplatform:$(params.toBranch)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=branch=$(params.toBranch)"
    workspaces:
      - name: git-workspace
        workspace: git-workspace
  - name: branch-docker-build-simplatform-jar
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-docker-build-simplatform-repo
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application/galasa-simplatform-3270
    - name: dockerfilePath
      value: automation/dockerfiles/simplatform/simplatform-amd64-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-simplatform-amd64:$(params.toBranch)
    - name: noPush
      value: ""
    # - name: buildArgs
    #   value:
    #     - "--build-arg=dockerRepository=harbor.galasa.dev"
    #     - "--build-arg=jdkImage=dockerhub/library/openjdk:11-jdk"
    workspaces:
      - name: git-workspace
        workspace: git-workspace
  - name: recycle-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-simplatform-repo
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - main-maven-repos
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - simplatform-$(params.toBranch)
  - name: wait-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - main-maven-repos
      - --resource
      - apps:Deployment:simplatform-$(params.toBranch)
      - --health

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace