#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-gradle
  namespace: galasa-build
spec:
  params:
  - name: fromBranch
    type: string
    default: main
  - name: toBranch
    type: string
    default: main
  - name: revision
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-maven-repos
  - name: jacocoEnabled
    type: string
    default: "true"
  # isMainOrRelease accepts a true or false value which is passed to the Gradle build script as a build argument later.
  # When set to true, Gradle will complete signing tasks like signing artifacts with a GPG key.
  # Should be set to true for Main or Release builds. Set to false if doing a branch build.
  - name: isMainOrRelease
    type: string
    default: "true"
  workspaces:
  - name: git-workspace
# 
# 
# 
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: clone-gradle
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/gradle
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/gradle
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: check-branch
    # Have to remove this when clause for now, as get-commit and the build task should runAfter this
    # but if this doesn't execute, the pipeline will stop. Need to improve in future.
    # when: 
    #   - input: "$(params.toBranch)"
    #     operator: notin
    #     values: ["main"]
    taskRef: 
      name: git-check-branch
    runAfter:
    - clone-gradle  
    params:
    - name: context
      value: $(context.pipelineRun.name)/gradle
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - check-branch
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: gradle
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-gradle-build-gradle
    taskRef:
      name: gradle-build
    runAfter: 
      - check-branch
    params:
    - name: context
      value: $(context.pipelineRun.name)/gradle
    - name: buildArgs
      value:
        - "-PsourceMaven=https://repo.maven.apache.org/maven2/"
        - "-PcentralMaven=https://repo.maven.apache.org/maven2/"
        - "-PtargetMaven=/workspace/git/$(context.pipelineRun.name)/gradle/repo"
        - "-PjacocoEnabled=$(params.jacocoEnabled)"
        - "-PisMainOrRelease=$(params.isMainOrRelease)"
    - name: command
      value: 
        - check
        - publish
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-docker-build-gradle
    taskRef:
      name: docker-build
    runAfter:
      - get-commit
      - branch-gradle-build-gradle
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/gradle
    - name: dockerfilePath
      value: automation/dockerfiles/gradle/gradle-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-gradle:$(params.imageTag)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=$(params.fromBranch)"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: recycle-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-gradle
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart
      - --kind 
      - Deployment
      - --resource-name
      - gradle-$(params.imageTag)
# 
# 
# 
  - name: wait-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:gradle-$(params.imageTag)
      - --health
# 
# 
# 
  # Trigger the next Pipeline (branch-maven)
  - name: trigger-maven
    taskRef:
      name: tkn-cli
    runAfter:
    - wait-deployment
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation
    - name: command
      value: 
      - pipeline
      - start
      - branch-maven
      - -n
      - galasa-build
      - --prefix-name 
      - trigger-maven-$(params.toBranch)
      - --param
      - fromBranch=$(params.toBranch)
      - --param
      - toBranch=$(params.toBranch)
      - --param
      - revision=$(params.revision)
      - --param
      - refspec=$(params.refspec)
      - --param
      - imageTag=$(params.imageTag)
      - --param
      - appname=$(params.appname)
      - --param
      - jacocoEnabled=$(params.jacocoEnabled)
      - --param
      - isMainOrRelease=$(params.isMainOrRelease)
      - --use-param-defaults # This forces Tekton to use the default params of any we haven't passed in
      - --workspace
      - name=git-workspace,volumeClaimTemplateFile=./pipelines/templates/git-workspace-template.yaml
      - --pod-template
      - ./pipelines/templates/pod-template.yaml
      - --serviceaccount
      - galasa-build-bot
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  finally:
  - name: report-failed-build
    when:
      - input: "$(tasks.status)"
        operator: in
        values: ["Failed"]
    taskRef:
      name: slack-post
    params:
    - name: repo
      value: "gradle"
    - name: pipelineRunName
      value: $(context.pipelineRun.name)