#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: branch-wrapping
  namespace: galasa-build
spec:
  params:
  - name: toBranch
    type: string
    default: main
  - name: revision
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-maven-repos
  - name: jacocoEnabled
    type: string
    default: "true"
  # isMainOrRelease accepts a true or false value which is passed to any Gradle build script as a build argument later.
  # Not used in this pipeline as is a Maven build but needs passing through to the next build for the Gradle repository.
  - name: isMainOrRelease
    type: string
    default: "true"
  workspaces:
  - name: git-workspace
#
#
#
  tasks:
  - name: clone-automation
    taskRef:
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
#
#
#
# Clone the main branch, even if this isn't for a main build
# In the next task, the pipeline will switch to the correct branch
#
  - name: clone-wrapping
    taskRef:
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/wrapping
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/wrapping
    workspaces:
     - name: output
       workspace: git-workspace
#
#
#
  - name: check-branch
    taskRef:
      name: git-check-branch
    runAfter:
    - clone-wrapping
    params:
    - name: context
      value: $(context.pipelineRun.name)/wrapping
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace
#
#
#
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - check-branch
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: wrapping
    workspaces:
     - name: git-workspace
       workspace: git-workspace
#
#
#
  - name: maven-gpg
    taskRef:
      name: maven-gpg
    runAfter:
    - check-branch
    params:
    - name: context
      value: $(context.pipelineRun.name)/wrapping
    workspaces:
     - name: git-workspace
       workspace: git-workspace
#
#
#
  - name: branch-maven-build-wrapping
    taskRef:
      name: maven-build
    runAfter:
    - maven-gpg
    params:
    - name: context
      value: $(context.pipelineRun.name)/wrapping
    - name: settingsLocation
      value: /workspace/git/gpg/settings.xml
    - name: buildArgs
      value:
        - "-Dgalasa.source.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/wrapping/repo"
        - "-Dgalasa.jacocoEnabled=$(params.jacocoEnabled)"
        - "-Dgalasa.isRelease=$(params.isMainOrRelease)"
    - name: command
      value:
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
#
#
#
  - name: branch-docker-build-wrapping
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-maven-build-wrapping
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/wrapping
    - name: dockerfilePath
      value: automation/dockerfiles/wrapping/wrapping-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-wrapping:$(params.imageTag)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
#
#
#
  - name: recycle-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-wrapping
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value:
      - app
      - actions
      - run
      - $(params.appname)
      - restart
      - --kind
      - Deployment
      - --resource-name
      - wrapping-$(params.toBranch)
#
#
#
  - name: wait-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value:
      - app
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:wrapping-$(params.toBranch)
      - --health
#
#
#
  # Trigger the next Pipeline (branch-gradle)
  - name: trigger-gradle
    taskRef:
      name: tkn-cli
    runAfter:
    - wait-deployment
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation
    - name: command
      value:
      - pipeline
      - start
      - branch-gradle
      - -n
      - galasa-build
      - --prefix-name
      - trigger-gradle-$(params.toBranch)
      - --param
      - fromBranch=$(params.toBranch)
      - --param
      - toBranch=$(params.toBranch)
      - --param
      - revision=$(params.revision)
      - --param
      - refspec=$(params.refspec)
      - --param
      - imageTag=$(params.imageTag)
      - --param
      - appname=$(params.appname)
      - --param
      - jacocoEnabled=$(params.jacocoEnabled)
      - --param
      - isMainOrRelease=$(params.isMainOrRelease)
      - --use-param-defaults # This forces Tekton to use the default params of any we haven't passed in
      - --workspace
      - name=git-workspace,volumeClaimTemplateFile=./pipelines/templates/git-workspace-template.yaml
      - --pod-template
      - ./pipelines/templates/pod-template.yaml
      - --serviceaccount
      - galasa-build-bot
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  finally:
  - name: report-failed-build
    when:
      - input: "$(tasks.status)"
        operator: in
        values: ["Failed"]
    taskRef:
      name: slack-post
    params:
    - name: pipelineName
      value: $(context.pipeline.name)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)