#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-obr
  namespace: galasa-build
spec:
  params:
  - name: branch
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  workspaces:
  - name: git-workspace
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-framework
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/framework
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/framework
    workspaces:
     - name: output
       workspace: git-workspace     
  - name: clone-extensions
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/extensions
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/extensions
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-managers
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/managers
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/managers
    workspaces:
     - name: output
       workspace: git-workspace     
  - name: clone-obr
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/obr
    - name: revision
      value: $(params.branch)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/obr
    workspaces:
     - name: output
       workspace: git-workspace
  - name: maven-gpg
    taskRef:
      name: maven-gpg
    runAfter:
    - clone-automation
    - clone-framework
    - clone-extensions
    - clone-managers
    - clone-obr
    params:
    - name: context 
      value: $(context.pipelineRun.name)/obr
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-obr
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: obr
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: generate-bom
    taskRef:
      name: galasabld
    runAfter:
    - maven-gpg
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: command
      value:       
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--bom"
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
  - name: list-bom
    taskRef: 
      name: unix-command
    runAfter:
    - generate-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: command
      value: 
        - "cat"
        - "pom.xml"
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
  - name: branch-maven-build-bom
    taskRef:
      name: maven-build
    runAfter: 
      - list-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/obr/gpg/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.branch)/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/repo"
    - name: command
      value: deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
  - name: generate-obr
    taskRef:
      name: galasabld
    runAfter:
    - branch-maven-build-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: command
      value:       
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--obr"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: list-obr
    taskRef:
      name: unix-command
    runAfter:
    - generate-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: command
      value: 
        - cat
        - pom.xml  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: branch-maven-build-obr
    taskRef:
      name: maven-build
    runAfter:
      - list-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/obr/gpg/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.branch)/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/repo"
    - name: command
      value: deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: branch-docker-build-obr
    taskRef:
      name: docker-build
    runAfter:
      - branch-maven-build-obr
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/obr
    - name: dockerfilePath
      value: automation/dockerfiles/obr/obr-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-obr:$(params.branch)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=$(params.branch)"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: recycle-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-obr
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - main-maven-repos
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - obr-$(params.branch)
  - name: wait-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - main-maven-repos
      - --resource
      - apps:Deployment:obr-$(params.branch)
      - --health

### JAVADOCS
  - name: generate-javadocs
    taskRef: 
      name: galasabld
    runAfter:
    - clone-automation
    - clone-framework
    - clone-extensions
    - clone-managers
    - clone-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: command
      value: 
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--javadoc"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: maven-build-javadocs
    taskRef: 
      name: maven-build
    runAfter: 
    - generate-javadocs
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/obr/settings.xml
    - name: command
      value: deploy
    - name: buildArgs
      value: 
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/main/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/javadocs/repo"
        - "-Dmaven.javadoc.failOnError=false"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: docker-build-javadocs-image
    taskRef: 
      name: docker-build
    runAfter:
    - maven-build-javadocs
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-javadocs-image:main
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/javadocs/javadocs-image-dockerfile
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: docker-build-javadocs-repo
    taskRef: 
      name: docker-build
    runAfter:
    - docker-build-javadocs-image
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-javadocs:main
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs/docker
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/javadocs/javadocs-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: recycle-javadocs
    taskRef:
      name: argocd-cli
    runAfter:
    - docker-build-javadocs-repo
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - main-maven-repos
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - javadocs-main
  - name: wait-javadocs
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-javadocs
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - main-maven-repos
      - --resource
      - apps:Deployment:javadocs-main
      - --health
  - name: recycle-apidocs
    taskRef:
      name: argocd-cli
    runAfter:
    - wait-javadocs
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - main-maven-repos
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - apidocs-main
  - name: wait-apidocs
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-apidocs
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - main-maven-repos
      - --resource
      - apps:Deployment:apidocs-main
      - --health

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # finally:
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace