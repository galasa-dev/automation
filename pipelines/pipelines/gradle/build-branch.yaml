#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-gradle
  namespace: galasa-build
spec:
  params:
  - name: fromBranch
    type: string
    default: main
  - name: toBranch
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-maven-repos
  workspaces:
  - name: git-workspace
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: check-if-branch-exists
    when: 
      - input: "$(params.toBranch)"
        operator: notin
        # operator: in
        values: ["main"]
    taskRef: 
      name: git-check-branch
    params:
    - name: repo
      value: gradle
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: test
    when: 
      - input: "$(tasks.check-if-branch-exists.results.result)"
        operator: in
        values: ["Create branch"]
    taskRef: 
      name: unix-command
    params:
    - name: context
      value: /workspace/git
    - name: command
      value: 
        - echo
        - "Hello"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: clone-gradle
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/gradle
    - name: revision
      value: $(params.toBranch)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/gradle
    workspaces:
     - name: output
       workspace: git-workspace  
  # - name: get-commit
  #   taskRef:
  #     name: get-commit
  #   runAfter:
  #   - clone-gradle
  #   params:
  #   - name: pipelineRunName
  #     value: $(context.pipelineRun.name)
  #   - name: repo
  #     value: gradle
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace
  # - name: branch-gradle-build-gradle
  #   taskRef:
  #     name: gradle-build
  #   runAfter: 
  #     - clone-gradle
  #   params:
  #   - name: context
  #     value: $(context.pipelineRun.name)/gradle
  #   - name: buildArgs
  #     value:
  #       - "-PsourceMaven=https://repo.maven.apache.org/maven2/"
  #       - "-PcentralMaven=https://repo.maven.apache.org/maven2/"
  #       - "-PtargetMaven=/workspace/git/$(context.pipelineRun.name)/gradle/repo"
  #   - name: command
  #     value: 
  #       - check
  #       - publish
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace
  # - name: branch-docker-build-gradle
  #   taskRef:
  #     name: docker-build
  #   runAfter:
  #     - get-commit
  #     - branch-gradle-build-gradle
  #   params:
  #   - name: pipelineRunName
  #     value: $(context.pipelineRun.name)
  #   - name: context
  #     value: $(context.pipelineRun.name)/gradle
  #   - name: dockerfilePath
  #     value: automation/dockerfiles/gradle/gradle-dockerfile
  #   - name: imageName
  #     value: harbor.galasa.dev/galasadev/galasa-gradle:$(params.imageTag)
  #   - name: noPush
  #     value: ""
  #   - name: buildArgs
  #     value:
  #       - "--build-arg=tag=$(params.fromBranch)"
  #       - "--build-arg=dockerRepository=harbor.galasa.dev"
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace
  # - name: recycle-deployment
  #   taskRef:
  #     name: argocd-cli
  #   runAfter:
  #   - branch-docker-build-gradle
  #   params:
  #   - name: server
  #     value: argocd.galasa.dev
  #   - name: command
  #     value: 
  #     - app 
  #     - actions 
  #     - run 
  #     - $(params.appname)
  #     - restart
  #     - --kind 
  #     - Deployment
  #     - --resource-name
  #     - gradle-$(params.imageTag)
  # - name: wait-deployment
  #   taskRef:
  #     name: argocd-cli
  #   runAfter:
  #   - recycle-deployment
  #   params:
  #   - name: server
  #     value: argocd.galasa.dev
  #   - name: command
  #     value: 
  #     - app 
  #     - wait
  #     - $(params.appname)
  #     - --resource
  #     - apps:Deployment:gradle-$(params.imageTag)
  #     - --health
  # # Trigger the next Pipeline (branch-maven)
  # - name: trigger-maven
  #   taskRef:
  #     name: tkn-cli
  #   runAfter:
  #   - wait-deployment
  #   params:
  #   - name: context
  #     value: $(context.pipelineRun.name)/automation
  #   - name: command
  #     value: 
  #     - pipeline
  #     - start
  #     - branch-maven
  #     - -n
  #     - galasa-build
  #     - --prefix-name 
  #     - trigger-maven-$(params.toBranch)
  #     - --param
  #     - fromBranch=$(params.fromBranch)
  #     - --param
  #     - toBranch=$(params.toBranch)
  #     - --param
  #     - refspec=$(params.refspec)
  #     - --param
  #     - imageTag=$(params.imageTag)
  #     - --param
  #     - appname=$(params.appname)
  #     - --workspace
  #     - name=git-workspace,volumeClaimTemplateFile=./pipelines/templates/git-workspace-template.yaml
  #     - --pod-template
  #     - ./pipelines/templates/pod-template.yaml
  #     - --serviceaccount
  #     - galasa-build-bot
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # finally:
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace