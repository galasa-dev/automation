#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-obr
  namespace: galasa-build
spec:
  workspaces:
  - name: git-workspace
  params:
  - name: headRef
    type: string
  - name: headSha
    type: string
  - name: baseRef
    type: string
  - name: prUrl
    type: string
  - name: statusesUrl
    type: string
  - name: issueUrl
    type: string
  - name: userId
    type: string
  - name: prNumber
    type: string
  - name: action
    type: string
  tasks:
  - name: git-verify
    taskRef:
      name: git-verify
    params:
    - name: userId
      value: $(params.userId)
    - name: prUrl
      value: $(params.prUrl)
    - name: action
      value: $(params.action)
  - name: clone-automation
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-framework
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/framework
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/framework
    workspaces:
     - name: output
       workspace: git-workspace     
  - name: clone-extensions
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/extensions
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/extensions
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-managers
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/managers
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/managers
    workspaces:
     - name: output
       workspace: git-workspace     
  - name: clone-obr
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/obr
    - name: revision
      value: $(params.baseRef)
    - name: refspec
      value: refs/pull/$(params.prNumber)/head:refs/heads/$(params.baseRef)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/obr
    workspaces:
     - name: output
       workspace: git-workspace
  - name: maven-gpg
    taskRef:
      name: maven-gpg
    runAfter:
    - clone-automation
    - clone-framework
    - clone-extensions
    - clone-managers
    - clone-obr
    params:
    - name: context 
      value: $(context.pipelineRun.name)/obr
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-obr
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: obr
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: generate-bom
    taskRef:
      name: galasabld
    runAfter:
    - maven-gpg
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: command
      value:       
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--bom"
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
  - name: list-bom
    taskRef: 
      name: unix-command
    runAfter:
    - generate-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: command
      value: 
        - "cat"
        - "pom.xml"
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
  - name: maven-build-bom
    taskRef:
      name: maven-build
    runAfter: 
      - list-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/obr/gpg/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/main/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/repo"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
  - name: generate-obr
    taskRef:
      name: galasabld
    runAfter:
    - maven-build-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: command
      value:       
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--obr"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: list-obr
    taskRef:
      name: unix-command
    runAfter:
    - generate-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: command
      value: 
        - cat
        - pom.xml  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: maven-build-obr
    taskRef:
      name: maven-build
    runAfter:
      - list-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/obr/gpg/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/main/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/repo"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: docker-build-obr
    taskRef:
      name: docker-build
    runAfter:
      - maven-build-obr
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/obr
    - name: dockerfilePath
      value: automation/dockerfiles/obr/obr-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-obr:$(params.headSha)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=main"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace

### JAVADOC
  - name: generate-javadoc
    taskRef: 
      name: galasabld
    runAfter:
    - docker-build-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: command
      value: 
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--javadoc"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: maven-build-javadoc
    taskRef: 
      name: maven-build-java18
    runAfter: 
    - generate-javadoc
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/obr/settings.xml
    - name: command
      value: 
        - deploy
    - name: buildArgs
      value: 
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/main/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/javadocs/docker/repo"
        - "-Dmaven.javadoc.failOnError=false"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: docker-build-javadoc-site
    taskRef: 
      name: docker-build
    runAfter:
    - maven-build-javadoc
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-javadoc-site:$(params.headSha)
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/javadoc/javadoc-site-dockerfile
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: docker-build-javadoc-maven-repo
    taskRef: 
      name: docker-build
    runAfter:
    - docker-build-javadoc-site
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-javadoc-maven-repo:$(params.headSha)
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs/docker
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/javadoc/javadoc-maven-repo-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  finally:
  - name: git-status
    when:
      - input: "$(tasks.git-verify.status)"
        operator: in
        values: ["Succeeded"]
    taskRef:
      name: git-status
    params:
    - name: status
      value: $(tasks.status)
    - name: prUrl
      value: $(params.prUrl)
    - name: statusesUrl
      value: $(params.statusesUrl)
    - name: issueUrl
      value: $(params.issueUrl)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace