#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-cli
  namespace: galasa-build
spec:
  params:
  - name: toBranch
    type: string
    default: main
  - name: revision
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-cli
  workspaces:
  - name: git-workspace
# 
# 
# 
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace

  #----------------------------------------------------------------
  - name: clone-framework
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/framework
    - name: revision
      value: $(params.revision)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/framework
    workspaces:
     - name: output
       workspace: git-workspace 

  #----------------------------------------------------------------
  # Clone the CLI repo
  - name: clone-cli
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/cli
    - name: revision
      value: $(params.revision)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/cli
    workspaces:
     - name: output
       workspace: git-workspace   

  #----------------------------------------------------------------
  # Call gradle to pull-down dependencies we need and put them in 
  # the correct places.
  - name: gather-dependencies
    taskRef: 
      name: gradle-build
    runAfter: 
    - clone-cli
    params:
    - name: context
      value: $(context.pipelineRun.name)/framework/galasa-parent
    - name: buildArgs
      value:
        - "-PsourceMaven=https://development.galasa.dev/main/maven-repo/maven"
        - "-PcentralMaven=https://repo.maven.apache.org/maven2/"
        - "-PtargetMaven=/workspace/git/$(context.pipelineRun.name)/framework/repo"
    - name: command
      value: 
        - installJarsIntoTemplates
    workspaces:
    - name: git-workspace
      workspace: git-workspace

  #----------------------------------------------------------------
  # Make sure the dependencies are all where we need them to be before we 
  # generate code from the openapi file.
  - name: check-branch
    taskRef: 
      name: git-check-branch
    runAfter:
    - clone-cli  
    - clone-automation
    - clone-framework
    - gather-dependencies
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  #----------------------------------------------------------------
  # Generate Go client code from the openapi.yaml so galasactl can 
  # talk to the API server.
  - name: generate-api
    taskRef: 
      name: general-command
    runAfter:
    - check-branch
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: harbor.galasa.dev/common/openapi:main  
    - name: command
      value:  
        - java
        - -jar
        - /opt/openapi/openapi-generator-cli.jar
        - generate
        - -i
        - /workspace/git/$(context.pipelineRun.name)/framework/openapi.yaml
        - -g
        - go 
        - -o
        - pkg/galasaapi
        - --additional-properties=packageName=galasaapi
    workspaces:
     - name: git-workspace
       workspace: git-workspace         

  #----------------------------------------------------------------
  # The go.mod is out of date, as it doesn't include the generated code
  # So remove it. It gets re-generated when we compile.
  - name: clear-mod
    taskRef:
      name: unix-command
    runAfter:
    - generate-api
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli/pkg/galasaapi
    - name: command
      value:
        - rm
        - -v
        - go.mod
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # The go.mod is out of date, as it doesn't include the generated code
  # So remove it. It gets re-generated when we compile.
  - name: clear-sum
    taskRef:
      name: unix-command
    runAfter:
    - clear-mod
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli/pkg/galasaapi
    - name: command
      value:
        - rm
        - -v
        - go.sum
    workspaces:
     - name: git-workspace
       workspace: git-workspace     

  #----------------------------------------------------------------
  # The go code needs to know which version of Galasa it is part of.
  # So substitute an eye-catcher with the correct value.
  - name: update-version
    taskRef: 
      name: script
    runAfter:
    - clear-sum   
    params:    
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: script
      value:  
        version=$(cat VERSION) &&
        cat pkg/cmd/root.go | sed "s/unknowncliversion-unknowngithash/${version}/1" > temp.txt &&
        mv -f temp.txt pkg/cmd/root.go &&
        cat pkg/cmd/root.go 
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  #----------------------------------------------------------------
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - update-version
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: cli
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # Invoke the make command to build the go code, run unit tests and
  # gather code coverage stats.
  - name: galasactl-make
    taskRef:
      name: make
    runAfter:
    - get-commit
    params:
    - name: directory
      value: $(context.pipelineRun.name)/cli
    workspaces:
     - name: git-workspace
       workspace: git-workspace    

  #----------------------------------------------------------------
  # Build a docker image with the command installed into it.
  - name: docker-build-cli
    taskRef: 
      name: docker-build
    runAfter:
    - galasactl-make
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-cli-amd64:$(params.imageTag)
    - name: context
      value: $(context.pipelineRun.name)/cli/
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/cli/cli-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=platform=linux-amd64"
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  - name: docker-build-cli-ibm
    taskRef: 
      name: docker-build
    runAfter:
    - docker-build-cli
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-cli-ibm-amd64:$(params.imageTag)
    - name: context
      value: $(context.pipelineRun.name)/cli/
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/cli/cli-ibm-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=tag=main"
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  - name: docker-build-cli-binary
    taskRef: 
      name: docker-build
    runAfter:
    - docker-build-cli-ibm
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-cli-binary-downloadables:$(params.imageTag)
    - name: context
      value: $(context.pipelineRun.name)/cli/
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/cli/cli-binary-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=branch=$(params.toBranch)"
    workspaces:
     - name: git-workspace
       workspace: git-workspace          

  #----------------------------------------------------------------
  - name: recycle-cli-binary
    taskRef:
      name: argocd-cli
    runAfter:
    - docker-build-cli-binary
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - cli-$(params.imageTag)

  #----------------------------------------------------------------
  - name: wait-cli-binary
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-cli-binary
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:cli-$(params.imageTag)
      - --health    
     

  #----------------------------------------------------------------
  # And finally... whether the above work or not, this gets called.
  #----------------------------------------------------------------

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # finally:
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace