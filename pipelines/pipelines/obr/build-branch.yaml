#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: branch-obr
  namespace: galasa-build
spec:
  params:
  - name: fromBranch
    type: string
    default: main
  - name: toBranch
    type: string
    default: main
  - name: revision
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-maven-repos
  workspaces:
  - name: git-workspace
# 
# 
# 
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: clone-framework
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/framework
    - name: revision
      value: $(params.revision)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/framework
    workspaces:
     - name: output
       workspace: git-workspace 
# 
# 
#     
  - name: clone-extensions
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/extensions
    - name: revision
      value: $(params.revision)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/extensions
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: clone-managers
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/managers
    - name: revision
      value: $(params.revision)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/managers
    workspaces:
     - name: output
       workspace: git-workspace  
# 
# 
#    
  - name: clone-obr
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/obr
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/obr
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: clone-buildutils
    when:
      - input: "$(params.toBranch)"
        operator: in
        values: ["release"]
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/buildutils
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "1"
    - name: subdirectory
      value: $(context.pipelineRun.name)/buildutils
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: check-branch
    taskRef: 
      name: git-check-branch
    runAfter:
    - clone-obr  
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
# 
# 
#  
  - name: maven-gpg
    taskRef:
      name: maven-gpg
    runAfter:
    - clone-automation
    - clone-framework
    - clone-extensions
    - clone-managers
    - clone-obr
    - check-branch
    params:
    - name: context 
      value: $(context.pipelineRun.name)/obr
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - check-branch
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: obr
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: generate-bom
    taskRef:
      name: galasabld
    runAfter:
    - maven-gpg
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: command
      value:       
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--bom"
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
# 
# 
#
  - name: list-bom
    taskRef: 
      name: general-command
    runAfter:
    - generate-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: command
      value: 
        - "cat"
        - "pom.xml"
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
# 
# 
#
  - name: branch-maven-build-bom
    taskRef:
      name: maven-build
    runAfter: 
      - list-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/galasa-bom
    - name: settingsLocation
      value: /workspace/git/gpg/settings.xml
    - name: buildArgs
      value:
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/repo"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
# 
# 
#
  - name: generate-obr
    taskRef:
      name: galasabld
    runAfter:
    - branch-maven-build-bom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: command
      value:       
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--obr"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: list-obr
    taskRef:
      name: general-command
    runAfter:
    - generate-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: command
      value: 
        - cat
        - pom.xml  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: branch-maven-build-obr
    taskRef:
      name: maven-build
    runAfter:
      - list-obr
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/dev.galasa.uber.obr
    - name: settingsLocation
      value: /workspace/git/gpg/settings.xml
    - name: buildArgs
      value:
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/repo"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: branch-docker-build-obr
    taskRef:
      name: docker-build
    runAfter:
      - branch-maven-build-obr
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/obr
    - name: dockerfilePath
      value: automation/dockerfiles/obr/obr-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-obr:$(params.imageTag)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=$(params.fromBranch)"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# When doing a release of Galasa, we need an OBR image with the galasabld executable inside it 
# 
#
  - name: make
    when:
      - input: "$(params.toBranch)"
        operator: in
        values: ["release"]
    taskRef:
      name: make
    runAfter:
      - clone-buildutils
      - branch-docker-build-obr  
    params:
    - name: directory
      value: $(context.pipelineRun.name)/buildutils
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: docker-build-obr-with-galasabld
    when:
      - input: "$(params.toBranch)"
        operator: in
        values: ["release"]
    taskRef:
      name: docker-build
    runAfter:
    - make
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/buildutils
    - name: dockerfilePath
      value: automation/dockerfiles/obr/obr-galasabld-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-obr-with-galasabld:release
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=tag=release"
        - "--build-arg=platform=linux-amd64"
    workspaces:
     - name: git-workspace
       workspace: git-workspace

# 
# 
  - name: recycle-obr-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-obr
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - obr-$(params.imageTag)
# 
# 
#
  - name: wait-obr-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-obr-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:obr-$(params.imageTag)
      - --health
# 
# 
#
### JAVADOC
# 
# 
#
  - name: generate-javadoc
    taskRef: 
      name: galasabld
    runAfter:
    - wait-obr-deployment
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: command
      value: 
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--javadoc"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: cat-javadoc-pom
    taskRef:
      name: general-command
    runAfter:
    - generate-javadoc
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: command
      value:
      - cat
      - pom.xml       
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: maven-build-javadoc
    taskRef: 
      name: maven-build
    runAfter: 
    - cat-javadoc-pom
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs
    - name: settingsLocation
      value: /workspace/git/gpg/settings.xml
    - name: command
      value: 
        - deploy
    - name: buildArgs
      value: 
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/managers"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/obr/javadocs/docker/repo"
        - "-Dmaven.javadoc.failOnError=false"
    - name: image
      value: harbor.galasa.dev/docker_proxy_cache/library/maven:3.8.7-openjdk-18
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: docker-build-javadoc-site
    taskRef: 
      name: docker-build
    runAfter:
    - maven-build-javadoc
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-javadoc-site:$(params.imageTag)
    - name: context
      value: $(context.pipelineRun.name)
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/javadoc/javadoc-site-dockerfile
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: docker-build-javadoc-maven-repo
    taskRef: 
      name: docker-build
    runAfter:
    - docker-build-javadoc-site
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-javadoc-maven-repo:$(params.imageTag)
    - name: context
      value: $(context.pipelineRun.name)/obr/javadocs/docker
    - name: noPush
      value: ""
    - name: dockerfilePath
      value: automation/dockerfiles/javadoc/javadoc-maven-repo-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
#
  - name: recycle-javadoc-maven-repo
    taskRef:
      name: argocd-cli
    runAfter:
    - docker-build-javadoc-maven-repo
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - javadoc-$(params.imageTag)
# 
# 
#
  - name: wait-javadoc-maven-repo
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-javadoc-maven-repo
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:javadoc-$(params.imageTag)
      - --health
# 
# 
#
  - name: recycle-javadoc-site
    taskRef:
      name: argocd-cli
    runAfter:
    - wait-javadoc-maven-repo
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart 
      - --kind 
      - Deployment
      - --resource-name
      - javadocsite-$(params.imageTag)
# 
# 
#
  - name: wait-javadoc-site
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-javadoc-site
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:javadocsite-$(params.imageTag)
      - --health
# 
# 
#
# Trigger obr-generic
  - name: trigger-obr-generic
    taskRef:
      name: tkn-cli
    runAfter:
    - wait-javadoc-site
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation
    - name: command
      value: 
      - pipeline
      - start
      - branch-obr-generic
      - -n
      - galasa-build
      - --prefix-name 
      - trigger-obr-generic-$(params.toBranch)
      - --param
      - fromBranch=$(params.toBranch)
      - --param
      - toBranch=$(params.toBranch)
      - --param
      - revision=$(params.revision)
      - --param
      - refspec=$(params.refspec)
      - --param
      - imageTag=$(params.imageTag)
      - --param
      - appname=$(params.appname)
      - --workspace
      - name=git-workspace,volumeClaimTemplateFile=./pipelines/templates/git-workspace-template.yaml
      - --pod-template
      - ./pipelines/templates/pod-template.yaml
      - --serviceaccount
      - galasa-build-bot
    workspaces:
     - name: git-workspace
       workspace: git-workspace    

  finally:
  - name: report-failed-build
    when:
      - input: "$(tasks.status)"
        operator: in
        values: ["Failed"]
    taskRef:
      name: slack-post
    params:
    - name: pipelineName
      value: $(context.pipeline.name)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: branch
      value: $(params.toBranch)