#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-webui
  namespace: galasa-build
  # Tell ArgoCD never to prune this pipeline definition.
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  workspaces:
  - name: git-workspace
  params:
  - name: headRef
    type: string
  - name: headSha
    type: string
  - name: baseRef
    type: string
  - name: prUrl
    type: string
  - name: statusesUrl
    type: string
  - name: issueUrl
    type: string
  - name: userId
    type: string
  - name: prNumber
    type: string
  - name: action
    type: string

#----------------------------------------------------------------
  tasks:
  - name: git-verify
    taskRef:
      name: git-verify
    params:
    - name: userId
      value: $(params.userId)
    - name: prUrl
      value: $(params.prUrl)
    - name: action
      value: $(params.action)

#----------------------------------------------------------------
# Clone the automation repository
  - name: clone-automation
    taskRef:
      name: git-clone
    runAfter:
    - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace

#----------------------------------------------------------------
# Clone the webui repository
  - name: clone-webui
    taskRef:
      name: git-clone
    runAfter:
    - clone-automation
    params:
    - name: url
      value: https://github.com/galasa-dev/webui
    - name: revision
      value: $(params.baseRef)
    - name: refspec
      value: refs/pull/$(params.prNumber)/head:refs/heads/$(params.baseRef)
    - name: depth
      value: "50"
    - name: subdirectory
      value: $(context.pipelineRun.name)/webui
    workspaces:
     - name: output
       workspace: git-workspace

  #----------------------------------------------------------------
  # Call gradle to pull-down dependencies we need and put them in the correct places,
  # before generating the TypeScript client code from the openapi.yaml so the webui can
  # talk to the API server.
  - name: generate-api
    taskRef:
      name: gradle-build
    runAfter:
    - clone-webui
    params:
    # The context indicates which folder the build.gradle is in.
    - name: context
      value: $(context.pipelineRun.name)/webui
    - name: buildArgs
      value:
        - "-PsourceMaven=https://development.galasa.dev/main/maven-repo/maven"
        - "-PcentralMaven=https://repo.maven.apache.org/maven2/"
        - "-PtargetMaven=/workspace/git/$(context.pipelineRun.name)/webui/repo"
    - name: command
      value:
        - generateTypeScriptClient
        - --info
    workspaces:
    - name: git-workspace
      workspace: git-workspace

  #----------------------------------------------------------------
  # The generated TypeScript client code contains some compilation and build errors, which need fixing:
  # 1. PromiseAPI.ts returns a constant named "result", which conflicts with the "result" field in a test run,
  #    so rename the constant to something else.
  # 2. index.ts runs into "Type error: Re-exporting a type when 'isolatedModules' is enabled requires using 'export type'",
  #    so apply the suggested fix to the offending exports.
  - name: fix-openapi-client
    taskRef:
      name: script
    runAfter:
    - generate-api
    params:
    - name: context
      value: $(context.pipelineRun.name)/webui
    - name: script
      value:
        mkdir -p temp &&
        promiseApiFile="galasa-ui/src/generated/galasaapi/PromiseAPI.ts" &&
        cat ${promiseApiFile} | sed "s/const result =/const apiResult =/g" > temp/PromiseAPI-temp.ts &&
        cat temp/PromiseAPI-temp.ts | sed "s/return result\.toPromise/return apiResult\.toPromise/g" > temp/PromiseAPI.ts &&
        cp temp/PromiseAPI.ts ${promiseApiFile} &&
        indexFile="galasa-ui/src/generated/galasaapi/index.ts" &&
        cat ${indexFile} | sed "s/export { Configuration/export { type Configuration/1" > temp/index-temp.ts &&
        cat temp/index-temp.ts | sed "s/export { PromiseMiddleware/export { type PromiseMiddleware/1" > temp/index.ts &&
        cp temp/index.ts ${indexFile}
    workspaces:
     - name: git-workspace
       workspace: git-workspace

#----------------------------------------------------------------
# Install the webui's dependencies
  - name: npm-install-webui
    taskRef:
      name: nodejs
    runAfter:
    - fix-openapi-client
    params:
    - name: context
      value: $(context.pipelineRun.name)/webui/galasa-ui
    - name: command
      value:
        - npm
        - install
    workspaces:
     - name: git-workspace
       workspace: git-workspace

#----------------------------------------------------------------
# Run the webui's unit tests
  - name: npm-test-webui
    taskRef:
      name: nodejs
    runAfter:
    - npm-install-webui
    params:
    - name: context
      value: $(context.pipelineRun.name)/webui/galasa-ui
    - name: command
      value:
        - npm
        - test
        - --
        - --watchAll=false
    workspaces:
     - name: git-workspace
       workspace: git-workspace

#----------------------------------------------------------------
# Build the webui
  - name: npm-build-webui
    taskRef:
      name: nodejs
    runAfter:
    - npm-test-webui
    params:
    - name: context
      value: $(context.pipelineRun.name)/webui/galasa-ui
    - name: command
      value:
        - npm
        - run
        - build
    workspaces:
     - name: git-workspace
       workspace: git-workspace

#----------------------------------------------------------------
# Build Docker image and push to harbor
  - name: docker-build-webui
    taskRef:
      name: docker-build
    runAfter:
    - npm-build-webui
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-ui:$(params.headSha)
    - name: context
      value: $(context.pipelineRun.name)/webui/galasa-ui
    - name: noPush
      value: "--no-push"
    - name: dockerfilePath
      value: automation/dockerfiles/webui/webui-dockerfile
    workspaces:
     - name: git-workspace
       workspace: git-workspace

#----------------------------------------------------------------
# And finally... whether the above works or not, update the status
# of the Tekton check in the pull request to either passed/failed.
  finally:
  - name: git-status
    when:
      - input: "$(tasks.git-verify.status)"
        operator: in
        values: ["Succeeded"]
    taskRef:
      name: git-status
    params:
    - name: status
      value: $(tasks.status)
    - name: prUrl
      value: $(params.prUrl)
    - name: statusesUrl
      value: $(params.statusesUrl)
    - name: issueUrl
      value: $(params.issueUrl)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)