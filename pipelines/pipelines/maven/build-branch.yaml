#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-maven
  namespace: galasa-build
spec:
  params:
  - name: fromBranch
    type: string
    default: main
  - name: toBranch
    type: string
    default: main
  - name: revision
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-maven-repos
  - name: jacocoEnabled
    type: string
    default: "true"
  - name: isRelease
    type: string
    default: "false"
  workspaces:
  - name: git-workspace
# 
# 
# 
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: clone-maven
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/maven
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/maven
    workspaces:
     - name: output
       workspace: git-workspace 
# 
# 
# 
  - name: check-branch
    taskRef: 
      name: git-check-branch
    runAfter:
    - clone-maven  
    params:
    - name: context
      value: $(context.pipelineRun.name)/maven
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace 
# 
# 
# 
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - check-branch
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: maven
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: maven-gpg
    taskRef:
      name: maven-gpg
    runAfter:
    - check-branch
    params:
    - name: context 
      value: $(context.pipelineRun.name)/maven/galasa-maven-plugin
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-maven-build-maven
    taskRef:
      name: maven-build
    runAfter:
    - maven-gpg
    params:
    - name: context
      value: $(context.pipelineRun.name)/maven/galasa-maven-plugin
    - name: settingsLocation
      value: /workspace/git/gpg/settings.xml
    - name: buildArgs
      value: 
        - "-Dgalasa.source.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/maven/repo"
        - "-Dgalasa.jacocoEnabled=$(params.jacocoEnabled)"
        - "-Dgalasa.isRelease=$(params.isRelease)"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-docker-build-maven
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-maven-build-maven
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/maven
    - name: dockerfilePath
      value: automation/dockerfiles/maven/maven-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-maven:$(params.imageTag)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=$(params.fromBranch)"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: recycle-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-maven
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart
      - --kind 
      - Deployment
      - --resource-name
      - maven-$(params.imageTag)
# 
# 
# 
  - name: wait-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:maven-$(params.imageTag)
      - --health
# 
# 
# 
  # Trigger the next Pipeline (branch-framework)
  - name: trigger-framework
    taskRef:
      name: tkn-cli
    runAfter:
    - wait-deployment
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation
    - name: command
      value: 
      - pipeline
      - start
      - branch-framework
      - -n
      - galasa-build
      - --prefix-name 
      - trigger-framework-$(params.toBranch)
      - --param
      - fromBranch=$(params.toBranch)
      - --param
      - toBranch=$(params.toBranch)
      - --param
      - revision=$(params.revision)
      - --param
      - refspec=$(params.refspec)
      - --param
      - imageTag=$(params.imageTag)
      - --param
      - appname=$(params.appname)
      - --param
      - jacocoEnabled=$(params.jacocoEnabled)
      - --param
      - isRelease=$(params.isRelease)
      - --use-param-defaults # This forces Tekton to use the default params of any we haven't passed in
      - --workspace
      - name=git-workspace,volumeClaimTemplateFile=./pipelines/templates/git-workspace-template.yaml
      - --pod-template
      - ./pipelines/templates/pod-template.yaml
      - --serviceaccount
      - galasa-build-bot
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # finally:
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace