#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-cli
  namespace: galasa-build
  # Tell ArgoCD never to prune this pipeline definition.
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  workspaces:
  - name: git-workspace
  params:
  - name: headRef
    type: string
  - name: headSha
    type: string
  - name: baseRef
    type: string
  - name: prUrl
    type: string
  - name: statusesUrl
    type: string
  - name: issueUrl
    type: string
  - name: userId
    type: string
  - name: prNumber
    type: string
  - name: action
    type: string
  tasks:

  #----------------------------------------------------------------
  - name: git-verify
    taskRef:
      name: git-verify
    params:
    - name: userId
      value: $(params.userId)
    - name: prUrl
      value: $(params.prUrl)
    - name: action
      value: $(params.action)

  #----------------------------------------------------------------
  - name: clone-automation
    taskRef: 
      name: git-clone
    runAfter:
    - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace

  #----------------------------------------------------------------
  - name: clone-framework
    taskRef: 
      name: git-clone
    runAfter:
    - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/framework
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/framework
    workspaces:
     - name: output
       workspace: git-workspace 

  #----------------------------------------------------------------
  # Clone the CLI repo
  - name: clone-cli
    taskRef: 
      name: git-clone
    runAfter:
    - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/cli
    - name: revision
      value: $(params.baseRef)
    - name: refspec
      value: refs/pull/$(params.prNumber)/head:refs/heads/$(params.baseRef)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/cli
    workspaces:
     - name: output
       workspace: git-workspace      

  #----------------------------------------------------------------
  # Call gradle to pull-down dependencies we need and put them in 
  # the correct places.
  - name: gather-dependencies
    taskRef: 
      name: gradle-build
    runAfter: 
    - clone-cli
    params:
    # The context indicates which folder the build.gradle is in.
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: buildArgs
      value:
        - "-PsourceMaven=https://development.galasa.dev/main/maven-repo/maven"
        - "-PcentralMaven=https://repo.maven.apache.org/maven2/"
        - "-PtargetMaven=/workspace/git/$(context.pipelineRun.name)/cli/repo"
    - name: command
      value: 
        - installJarsIntoTemplates
        - --info
    workspaces:
    - name: git-workspace
      workspace: git-workspace

  #----------------------------------------------------------------
  # Generate Go client code from the openapi.yaml so galasactl can 
  # talk to the API server.
  - name: generate-api
    taskRef: 
      name: general-command
    runAfter:
    # Note: We still need the framework code so we can pick up the openapi definitions.
    - gather-dependencies
    - clone-framework
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: harbor.galasa.dev/common/openapi:main  
    - name: command
      value:  
        - java
        - -jar
        - /opt/openapi/openapi-generator-cli.jar
        - generate
        - -i
        - /workspace/git/$(context.pipelineRun.name)/framework/openapi.yaml
        - -g
        - go 
        - -o
        - pkg/galasaapi
        - --additional-properties=packageName=galasaapi
        - --global-property=apiTests=false
    workspaces:
     - name: git-workspace
       workspace: git-workspace         

  #----------------------------------------------------------------
  # The go.mod is out of date, as it doesn't include the generated code
  # So remove it. It gets re-generated when we compile.
  - name: clear-mod
    taskRef:
      name: general-command
    runAfter:
    - generate-api
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli/pkg/galasaapi
    - name: command
      value:
        - rm
        - -v
        - go.mod
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # The go.sum is out of date, as it doesn't include the generated code
  # So remove it. It gets re-generated when we compile.
  - name: clear-sum
    taskRef:
      name: general-command
    runAfter:
    - clear-mod
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli/pkg/galasaapi
    - name: command
      value:
        - rm
        - -v
        - go.sum
    workspaces:
     - name: git-workspace
       workspace: git-workspace     

  #----------------------------------------------------------------
  # The go code needs to know which version of Galasa it is part of.
  # So substitute an eye-catcher with the correct value.
  - name: update-version
    taskRef: 
      name: script
    runAfter:
    - clear-sum   
    params:    
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: script
      value:  
        version=$(cat VERSION) &&
        cat pkg/cmd/root.go | sed "s/unknowncliversion-unknowngithash/${version}/1" > temp.txt &&
        mv -f temp.txt pkg/cmd/root.go &&
        cat pkg/cmd/root.go 
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  #----------------------------------------------------------------
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - update-version
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: cli
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # Invoke the make command to build the go code, run unit tests and
  # gather code coverage stats.
  - name: galasactl-make
    taskRef:
      name: make
    runAfter:
    - get-commit
    params:
    - name: directory
      value: $(context.pipelineRun.name)/cli
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  #----------------------------------------------------------------
  # START OF TESTS
  #----------------------------------------------------------------

  - name: chmod-local-script
    taskRef: 
      name: general-command
    runAfter:
      - galasactl-make
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: docker.io/library/bash:3.2.57
    - name: command
      value: 
        - chmod
        - +x
        - test-galasactl-local.sh
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: test-galasactl-local-maven-linux-amd64
    taskRef: 
      name: general-command
    runAfter:
      - chmod-local-script
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: docker.io/library/maven:3.8.6-openjdk-11
    - name: command
      value: 
        - ./test-galasactl-local.sh
        - --buildTool
        - maven
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: test-galasactl-local-gradle-linux-amd64
    taskRef: 
      name: general-command
    runAfter:
      - test-galasactl-local-maven-linux-amd64
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: docker.io/library/gradle:6.8.2-jdk11 
    - name: command
      value: 
        - ./test-galasactl-local.sh
        - --buildTool
        - gradle
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
# TO-DO Add tests for the other binaries, darwin etc
# 
# 
# 
  - name: chmod-ecosystem-script
    taskRef: 
      name: general-command
    runAfter:
      - test-galasactl-local-gradle-linux-amd64
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: docker.io/library/bash:3.2.57
    - name: command
      value: 
        - chmod
        - +x
        - test-galasactl-ecosystem.sh
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: test-galasactl-ecosystem-linux-amd64
    taskRef: 
      name: general-command
    runAfter:
      - chmod-ecosystem-script
    params:
    - name: context
      value: $(context.pipelineRun.name)/cli
    - name: image
      value: docker.io/library/openjdk:11
    - name: command
      value: 
        - ./test-galasactl-ecosystem.sh
        - --bootstrap
        - http://galasa-cicsk8s.hursley.ibm.com/bootstrap
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  # END OF TESTS
  #----------------------------------------------------------------
  # Build a docker image with the command installed into it.
  - name: docker-build-cli
    taskRef: 
      name: docker-build
    runAfter:
    - test-galasactl-ecosystem-linux-amd64
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-cli-amd64:$(params.headSha)
    - name: context
      value: $(context.pipelineRun.name)/cli/
    - name: noPush
      value: "--no-push"
    - name: dockerfilePath
      value: automation/dockerfiles/cli/cli-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=platform=linux-x86_64"
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #----------------------------------------------------------------
  - name: docker-build-cli-ibm
    taskRef: 
      name: docker-build
    runAfter:
    - docker-build-cli
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-cli-ibm-amd64:$(params.headSha)
    - name: context
      value: $(context.pipelineRun.name)/cli/
    - name: noPush
      value: "--no-push"
    - name: dockerfilePath
      value: automation/dockerfiles/cli/cli-ibm-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=tag=main"
    workspaces:
     - name: git-workspace
       workspace: git-workspace


  #----------------------------------------------------------------
  - name: docker-build-cli-binary
    taskRef: 
      name: docker-build
    runAfter:
    - docker-build-cli-ibm
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-cli-binary-downloadables:$(params.headSha)
    - name: context
      value: $(context.pipelineRun.name)/cli/
    - name: noPush
      value: "--no-push"
    - name: dockerfilePath
      value: automation/dockerfiles/cli/cli-binary-dockerfile
    - name: buildArgs
      value:
        - "--build-arg=branch=$(params.headRef)"
    workspaces:
     - name: git-workspace
       workspace: git-workspace   

  #----------------------------------------------------------------
  # And finally... whether the above work or not, this gets called.
  #----------------------------------------------------------------
  finally:

  #----------------------------------------------------------------
  # Tell the pull request the build succeeded/failed.
  - name: git-status
    when:
      - input: "$(tasks.git-verify.status)"
        operator: in
        values: ["Succeeded"]
    taskRef:
      name: git-status
    params:
    - name: status
      value: $(tasks.status)
    - name: prUrl
      value: $(params.prUrl)
    - name: statusesUrl
      value: $(params.statusesUrl)
    - name: issueUrl
      value: $(params.issueUrl)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)     

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace