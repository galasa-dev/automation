#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-eclipse
  namespace: galasa-build
spec:
  params:
  - name: eclipseVersion
    type: string
    default: "2022-09"
  - name: fromObrBranch
    type: string
    default: main
  - name: fromSimplatformBranch
    type: string
    default: prod
  - name: toBranch
    type: string
    default: main
  - name: revision
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-maven-repos
  workspaces:
  - name: git-workspace
# 
# 
# 
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: clone-eclipse
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/eclipse
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/eclipse
    workspaces:
     - name: output
       workspace: git-workspace  
# 
# 
# 
  - name: check-branch
    taskRef: 
      name: git-check-branch
    runAfter:
    - clone-eclipse  
    params:
    - name: context
      value: $(context.pipelineRun.name)/eclipse
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace  
# 
# 
#     
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-eclipse
    - check-branch
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: eclipse
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: maven-gpg
    taskRef:
      name: maven-gpg
    runAfter:
    - clone-eclipse 
    - check-branch
    params:
    - name: context
      value: $(context.pipelineRun.name)/eclipse/galasa-eclipse-parent
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-maven-build-eclipse
    taskRef:
      name: maven-build
    runAfter:
    - maven-gpg
    params:
    - name: context
      value: $(context.pipelineRun.name)/eclipse/galasa-eclipse-parent
    - name: settingsLocation
      value: /workspace/git/gpg/settings.xml
    - name: image
      value: docker.io/library/maven:3.8.5-openjdk-17
    - name: buildArgs
      value:
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/eclipse/repo"
        - "-Dgalasa.source.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.eclipse.repo=http://download.eclipse.org/releases/$(params.eclipseVersion)"
        - "-Dgalasa.runtime.repo=https://development.galasa.dev/$(params.fromObrBranch)/maven-repo/obr"
        - "-Dgalasa.simplatform.repo=https://development.galasa.dev/$(params.fromSimplatformBranch)/maven-repo/simplatform"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: branch-docker-build-eclipse
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-maven-build-eclipse
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/eclipse
    - name: dockerfilePath
      value: automation/dockerfiles/eclipse/eclipse-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-eclipse:$(params.imageTag)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
      - name: git-workspace
        workspace: git-workspace
# 
# 
# 
  - name: branch-docker-build-eclipse-p2
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - branch-maven-build-eclipse
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/eclipse/galasa-eclipse-parent/dev.galasa.eclipse.site
    - name: dockerfilePath
      value: automation/dockerfiles/eclipse/eclipse-p2-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-p2:$(params.imageTag)
    - name: noPush
      value: ""
    workspaces:
      - name: git-workspace
        workspace: git-workspace  
# 
# 
# 
  - name: recycle-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - branch-docker-build-eclipse
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart
      - --kind 
      - Deployment
      - --resource-name
      - eclipse-$(params.imageTag) 
# 
# 
# 
  - name: wait-deployment
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:eclipse-$(params.imageTag) 
      - --health
# 
# 
# 
  - name: recycle-deployment-p2
    taskRef:
      name: argocd-cli
    runAfter:
    - wait-deployment
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - actions 
      - run 
      - $(params.appname)
      - restart
      - --kind 
      - Deployment
      - --resource-name
      - p2-$(params.imageTag) 
# 
# 
# 
  - name: wait-deployment-p2
    taskRef:
      name: argocd-cli
    runAfter:
    - recycle-deployment-p2
    params:
    - name: server
      value: argocd.galasa.dev
    - name: command
      value: 
      - app 
      - wait
      - $(params.appname)
      - --resource
      - apps:Deployment:p2-$(params.imageTag) 
      - --health    
# 
# 
# 
  # Trigger CLI (when doing any kind of build)
  - name: trigger-cli
    taskRef:
      name: tkn-cli
    runAfter:
    - wait-deployment-p2
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation
    - name: command
      value: 
      - pipeline
      - start
      - branch-cli
      - -n
      - galasa-build
      - --prefix-name 
      - trigger-isolated-$(params.toBranch)
      - --param
      - toBranch=$(params.toBranch)
      - --param
      - fromSimplatformBranch=$(params.fromSimplatformBranch)
      - --param
      - revision=$(params.revision)
      - --param
      - refspec=$(params.refspec)
      - --param
      - imageTag=$(params.imageTag)
      - --param
      - appnameIsolated=$(params.appname)
      - --workspace
      - name=git-workspace,volumeClaimTemplateFile=./pipelines/templates/git-workspace-template.yaml
      - --pod-template
      - ./pipelines/templates/pod-template.yaml
      - --serviceaccount
      - galasa-build-bot
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # finally:
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace