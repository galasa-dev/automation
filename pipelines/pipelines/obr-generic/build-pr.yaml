#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-obr-generic
  namespace: galasa-build
spec:
  workspaces:
  - name: git-workspace
  params:
  - name: headRef
    type: string
  - name: headSha
    type: string
  - name: baseRef
    type: string
  - name: prUrl
    type: string
  - name: statusesUrl
    type: string
  - name: issueUrl
    type: string
  - name: userId
    type: string
  - name: prNumber
    type: string
  - name: action
    type: string
  tasks:
  - name: git-verify
    taskRef:
      name: git-verify
    params:
    - name: userId
      value: $(params.userId)
    - name: prUrl
      value: $(params.prUrl)
    - name: action
      value: $(params.action)
  - name: clone-automation
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-framework
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/framework
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/framework
    workspaces:
     - name: output
       workspace: git-workspace     
  - name: clone-extensions
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/extensions
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/extensions
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-managers
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/managers
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/managers
    workspaces:
     - name: output
       workspace: git-workspace     
  - name: clone-obr
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify  
    params:
    - name: url
      value: https://github.com/galasa-dev/obr
    - name: revision
      value: $(params.baseRef)
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/obr
    workspaces:
     - name: output
       workspace: git-workspace
  - name: maven-gpg
    taskRef:
      name: maven-gpg
    runAfter:
    - clone-automation
    - clone-framework
    - clone-extensions
    - clone-managers
    - clone-obr
    params:
    - name: context 
      value: $(context.pipelineRun.name)/obr/obr-generic
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  

  - name: generate-embedded
    taskRef:
      name: galasabld
    runAfter:
    - maven-gpg
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/obr-generic
    - name: command
      value:       
        - "template"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/framework/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/extensions/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/managers/release.yaml"
        - "--releaseMetadata"
        - "/workspace/git/$(context.pipelineRun.name)/obr/release.yaml"
        - "--template"
        - "pom.template"
        - "--output"
        - "pom.xml"
        - "--obr"
    workspaces:
     - name: git-workspace
       workspace: git-workspace      
 

  - name: maven-build-obr-generic
    taskRef:
      name: maven-build
    runAfter: 
      - generate-embedded
    params:
    - name: context
      value: $(context.pipelineRun.name)/obr/obr-generic
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/obr/obr-generic/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/main/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - dev.galasa:galasa-maven-plugin:0.15.0:obrembedded
    - name: command
      value: 
        - process-sources
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: docker-build-obr-generic
    taskRef:
      name: docker-build
    runAfter:
      - maven-build-obr-generic
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/obr/obr-generic
    - name: dockerfilePath
      value: automation/dockerfiles/runtime/obrGeneric/obrGeneric-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-obr-generic:$(params.headSha)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=main"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
    workspaces:
     - name: git-workspace
       workspace: git-workspace  

  - name: copy-files
    taskRef:
      name: script
    runAfter:
      - docker-build-obr-generic  
    params:
    - name: context
      value: $(context.pipelineRun.name)
    - name: script
      value: cp -vr /opt/k8s/bin/kubectl 
             /workspace/git/$(context.pipelineRun.name)/automation/dockerfiles/runtime/bootEmbedded/set-external-env.sh 
             /workspace/git/$(context.pipelineRun.name)/automation/dockerfiles/runtime/bootEmbedded/trace-log4j.properties 
             /workspace/git/$(context.pipelineRun.name)/obr/obr-generic/
    - name: image
      value: harbor.galasa.dev/common/kubectl:main  
    workspaces:
     - name: git-workspace
       workspace: git-workspace   

  - name: docker-build-amd64-embedded
    taskRef:
      name: docker-build
    runAfter:
      - copy-files
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/obr/obr-generic/
    - name: dockerfilePath
      value: automation/dockerfiles/runtime/bootEmbedded/bootEmbedded-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-boot-embedded-amd64:$(params.headSha)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=main"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=jdkImage=docker.io/library/openjdk:11"
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  - name: docker-build-ibm-embedded
    taskRef:
      name: docker-build
    runAfter:
      - docker-build-amd64-embedded
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/runtime/ibmBootEmbedded
    - name: dockerfilePath
      value: automation/dockerfiles/runtime/ibmBootEmbedded/ibmBootEmbedded-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-ibm-boot-embedded-amd64:$(params.headSha)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=tag=main"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=platform=amd64"
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  finally:
  - name: git-status
    when:
      - input: "$(tasks.git-verify.status)"
        operator: in
        values: ["Succeeded"]
    taskRef:
      name: git-status
    params:
    - name: status
      value: $(tasks.status)
    - name: prUrl
      value: $(params.prUrl)
    - name: statusesUrl
      value: $(params.statusesUrl)
    - name: issueUrl
      value: $(params.issueUrl)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace