#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-webapp
  namespace: galasa-build
spec:
  params:
  - name: fromBranch
    type: string
    default: main
  - name: toBranch
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  - name: imageTag
    type: string
    default: main
  - name: appname
    type: string
    default: main-maven-repos
  workspaces:
  - name: git-workspace
  tasks:
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-simplatform
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/simplatform
    - name: revision
      value: main
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/simplatform
    workspaces:
     - name: output
       workspace: git-workspace     
  - name: check-branch
    # when: 
    #   - input: "$(params.toBranch)"
    #     operator: notin
    #     values: ["main"]
    taskRef: 
      name: git-check-branch
    runAfter:
    - clone-simplatform  
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform
    - name: branch
      value: $(params.toBranch)
    workspaces:
     - name: git-workspace
       workspace: git-workspace     
  
  - name: maven-build-simplatform-application
    taskRef:
      name: maven-build
    runAfter:
    - clone-simplatform
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application/galasa-simplatform-webapp
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/simplatform/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/$(params.fromBranch)/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/simplatform/repo"
    - name: command
      value: 
        - deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace


  - name: ls
    taskRef:
      name: script
    runAfter:
      - maven-build-simplatform-application 
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application/galasa-simplatform-webapp
    - name: script
      value: ls
    - name: image
      value: busybox:latest
    workspaces:
     - name: git-workspace
       workspace: git-workspace      

  - name: docker-build-webapp
    taskRef:
      name: docker-build
    runAfter:
    - ls
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application/galasa-simplatform-webapp
    - name: dockerfilePath
      value: automation/dockerfiles/webapp/webapp-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-webapp:$(params.imageTag)
    - name: noPush
      value: ""
    workspaces:
      - name: git-workspace
        workspace: git-workspace     
 
  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # finally:
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace
