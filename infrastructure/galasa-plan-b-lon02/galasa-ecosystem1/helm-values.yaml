#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#
# ------------------------------------------------------------------------------------------------
#
# The values in this file are used to configure the "ecosystem1" Galasa service.
# These values act as overrides for the default values provided in the service's Helm chart.
# To view the values currently in use by ecosystem1, check that your Kubernetes context is 
# set to the cluster and namespace where ecosystem1 is installed and run the following command:
#
# helm get values main-ecosystem --all
#
# ------------------------------------------------------------------------------------------------

#
# The external hostname that the Galasa services can be accessed on via Ingress,
# must be a valid DNS hostname without a URL scheme (i.e. without "https://").
#
externalHostname: "galasa-ecosystem1.galasa.dev"
#
# The version of Galasa you want to run with, it is better that you do not use "latest" to ensure
# all the components are running the same version and a controlled upgrade can be performed
#
galasaVersion: "main"
#
#
# Name of the galasa service which will be shown as the title of the web user interface page.
# Any bookmarks taken by users in their browsers will also receive this name.
# Making this name distict helps users identify which Galasa service they are using.
# If they are all called the same thing, users with access to multiple systems may find that 
# confusing.
# It is RECOMMENDED that this value is changed to be unique,
# For example: Galasa Service XYZ
galasaServiceName: "Galasa Ecosystem 1"
#
#
# The container registry the Galasa images can be found in
#
galasaRegistry: "ghcr.io/galasa-dev"
# 
# 
# The name of the Docker image that contains Galasa's boot.jar file to launch ecosystem services
#
galasaBootImage: "galasa-boot-embedded-x86_64"
#
#
# The name of the Docker image that launches Galasa's web UI
#
galasaWebUiImage: "webui"
#
#
# The pull policy to be used for the Galasa images, only useful for Galasa development purposes
#
pullPolicy: "Always"
#
#
# The architecture the pods will be run on, at the moment, only adm64 is supported
#
architecture: amd64
#
#
# Values to enable and configure the use of ingress
# Note: The externalHostname value must be a valid DNS name for ingress to be used.
#
ingress:
  # The IngressClass to use for ingresses
  ingressClassName: "public-iks-k8s-nginx"

  # Values to configure the use of TLS in ingresses. For example:
  # tls:
  #   - hosts:
  #     - "*.example.com"
  #     secretName: mysecret
  tls:
    - hosts:
      - "galasa-ecosystem1.galasa.dev"
      secretName: galasa-wildcard-cert

  # The name of the Secret containing root and intermediate CA certificates in a single .pem file
  caCertSecretName: ""

  # Annotations to be added to ingresses. For example:
  # annotations:
  #   nginx.ingress.kubernetes.io/proxy-body-size: "0"
  #   nginx.ingress.kubernetes.io/ssl-redirect: "true"
  annotations: {}
#
#
# Values to configure the ecosystem's use of Dex
#
dex:
  # `configSecret` contains values as to whether a new Kubernetes Secret containing the Dex configuration
  # should be created, or if an existing Secret containing should be used.
  configSecret:
    # Enables the creation of a Kubernetes Secret using the values provided in `config` if set to true.
    # If set to false, you must provide a value for `secretName` that corresponds to an existing Secret.
    create: true

    # The name of the Kubernetes Secret containing the Dex configuration to mount within the Dex deployment.
    # `secretName` must point to a Secret containing a "config.yaml" key and a valid Dex configuration in YAML format.
    # If `secretName` is provided and `create` is set to true, then the given name will be ignored and a new Secret
    # named "<release-name>-dex-config" will be created.
    secretName: ""

  # `envFrom` represents a list of additional environment variables mounted from Kubernetes Secrets or ConfigMaps.
  # If you would like to mount an additional environment variable from a Secret or ConfigMap, provide the name of the
  # resource in the `envFrom` list. For example:
  # envFrom:
  #   - secretRef:
  #       name: github-oauth-app-secret
  #   - configMapRef:
  #       name: my-env-configmap
  envFrom:
    - secretRef:
        name: galasa-ecosystem1-github-oauth-app-for-dex
    - secretRef:
        name: galasa-ecosystem1-dex-webui-client

  # An ordered list of JSON Web Token (JWT) claims to use when Galasa sets the requestor of a test.
  # The first JWT claim that is matched will be used as the requestor of a test.
  usernameClaims:
    - preferred_username
    - name
    - sub

  # The Dex configuration - See the [Dex documentation](https://dexidp.io/docs) for more information.
  # By default, etcd is used as the storage option for the Galasa Ecosystem.
  config:
    issuer: "https://galasa-ecosystem1.galasa.dev/dex"

    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $githubOAuthAppClientId
        clientSecret: $githubOAuthAppClientSecret
        redirectURI: https://galasa-ecosystem1.galasa.dev/dex/callback
        orgs:
        - name: galasa-dev
          teams:
          - galasa-ecosystem1-users

    # OAuth 2.0 configuration values
    oauth2:
      skipApprovalScreen: true

    # A list of known clients that authenticate with Dex
    staticClients:
    - id: galasa-webui
      redirectURIs:
      - 'https://galasa-ecosystem1.galasa.dev/api/auth/callback'
      name: 'Galasa Ecosystem Web UI'
      # Use the webui client secret drawn from the secret mounted in envFrom
      secretEnv: webuiClientSecret

    # Token expiry configuration
    expiry:
      idTokens: 24h
      refreshTokens:
        reuseInterval: 8760h # 1 year
        validIfNotUsedFor: 8760h # 1 year
