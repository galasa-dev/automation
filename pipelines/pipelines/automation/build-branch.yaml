#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: branch-automation
  namespace: galasa-build
  annotations:
    argocd.argoproj.io/sync-options: Prune=false
spec:
  params:
  - name: branch
    type: string
    default: main
  - name: refspec
    type: string
    default: refs/heads/main:refs/heads/main
  workspaces:
  - name: git-workspace
  tasks:
# 
# 
# 
  - name: clone-automation
    taskRef: 
      name: git-clone
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: $(params.branch)
    - name: refspec
      value: $(params.refspec)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
# 
# 
# 
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: automation
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: go-build-ghverify
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-verify
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghverify
      - cmd/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: build-ghverify-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghverify
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-verify
    - name: dockerfilePath
      value: automation/dockerfiles/common/ghverify-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghverify:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #---------------------------------------------------------------------
  # Github pull request status publisher tool
  #---------------------------------------------------------------------
  # Used in pipelines to tell the github PR whether a build passed or failed.
  - name: go-build-ghstatus
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-status
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghstatus
      - cmd/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: build-ghstatus-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghstatus
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-status
    - name: dockerfilePath
      value: automation/dockerfiles/common/ghstatus-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghstatus:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #---------------------------------------------------------------------
  # Github activity monitor
  #---------------------------------------------------------------------
  # Build a tool which monitors github for webhook events which have previously
  # been delivered, and kick-off an internal pipeline to handle them.
  - name: go-build-ghmonitor
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-monitor
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghmonitor
      - cmd/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# 
  - name: build-ghmonitor-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghmonitor
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-monitor
    - name: dockerfilePath
      value: automation/dockerfiles/common/github-monitor-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghmonitor:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  


  #---------------------------------------------------------------------
  # Github webhook receiver
  #---------------------------------------------------------------------
  # A tool which is called by the webhook, responds OK, and 
  # tells a pull request that a build is 'pending...'
  #
  # Build the go code.
  - name: go-build-ghreceiver
    taskRef:
      name: go-build
    runAfter:
      - clone-automation
    params:
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-receiver
    - name: goArgs
      value:
      - build
      - -o
      - bin/ghreceiver
      - cmd/github-webhook-receiver/main.go  
    workspaces:
     - name: git-workspace
       workspace: git-workspace
# 
# 
# Build the docker image (and push it to harbor)
# 
# 
  - name: build-ghreceiver-image
    taskRef:
      name: docker-build
    runAfter:
    - go-build-ghreceiver
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/build-images/github-webhook-receiver
    - name: dockerfilePath
      value: automation/dockerfiles/common/github-receiver-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/ghreceiver:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  
  #---------------------------------------------------------------------
  # GPG signing tool
  #---------------------------------------------------------------------
  # Package the tool into a docker image.
  - name: build-gpg-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/gpg-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/gpg:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #---------------------------------------------------------------------
  # Kubectl tool
  #---------------------------------------------------------------------
  # Package the tool into a docker image.
  - name: build-kubectl-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/kubectl-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/kubectl:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #---------------------------------------------------------------------
  # ArgoCD CLI tool
  #---------------------------------------------------------------------
  # Package the tool into a docker image.
  - name: build-argocdcli-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/argocd-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/argocd-cli:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  #---------------------------------------------------------------------
  # Git cli tool
  #---------------------------------------------------------------------
  # Package the tool into a docker image
  - name: build-gitcli-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    - build-gpg-image
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/gitcli-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/gitcli:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  

  #---------------------------------------------------------------------
  # tkn cli tool - control tekton from within a tekton pipeline
  #---------------------------------------------------------------------
  # Package the tool into a docker image
  - name: build-tkn-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/tkn-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/tkn:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace  

  #---------------------------------------------------------------------
  # openapi generation tools - turn openapi yaml files into generated code
  #---------------------------------------------------------------------
  # Package the tool into a docker image
  - name: build-openapi-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/openapi-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/openapi:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  - name: build-swagger-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/swagger-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/swagger:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  - name: build-unzip-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/common
    - name: dockerfilePath
      value: automation/dockerfiles/common/unzip-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/unzip:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace 

  #---------------------------------------------------------------------
  # open jdk 11 image with the IBM certs installed in the trust store and JRE
  #---------------------------------------------------------------------
  # Package the tool into a docker image
  - name: build-openjdk11-ibm-image
    taskRef:
      name: docker-build
    runAfter:
    - clone-automation
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/automation/dockerfiles/certs
    - name: dockerfilePath
      value: automation/dockerfiles/common/openjdk11-ibm-dockerfile
    - name: imageName
      value: harbor.galasa.dev/common/openjdk11-ibm:$(params.branch)
    - name: noPush
      value: ""
    workspaces:
     - name: git-workspace
       workspace: git-workspace

  finally:
  - name: report-failed-build
    when:
      - input: "$(tasks.status)"
        operator: in
        values: ["Failed"]
    taskRef:
      name: slack-post
    params:
    - name: pipelineName
      value: $(context.pipeline.name)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: branch
      value: $(params.branch)
