#
# Copyright contributors to the Galasa project 
# 
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-simplatform
  namespace: galasa-build
spec:
  workspaces:
  - name: git-workspace
  params:
  - name: headRef
    type: string
  - name: headSha
    type: string
  - name: baseRef
    type: string
  - name: prUrl
    type: string
  - name: statusesUrl
    type: string
  - name: issueUrl
    type: string
  - name: userId
    type: string
  - name: prNumber
    type: string
  - name: action
    type: string
  tasks:
  - name: git-verify
    taskRef:
      name: git-verify
    params:
    - name: userId
      value: $(params.userId)
    - name: prUrl
      value: $(params.prUrl)
    - name: action
      value: $(params.action)
  - name: clone-automation
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/automation
    - name: revision
      value: main
    - name: refspec
      value: refs/heads/main:refs/heads/main
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/automation
    workspaces:
     - name: output
       workspace: git-workspace
  - name: clone-simplatform
    taskRef: 
      name: git-clone
    runAfter:
      - git-verify
    params:
    - name: url
      value: https://github.com/galasa-dev/simplatform
    - name: revision
      value: $(params.baseRef)
    - name: refspec
      value: refs/pull/$(params.prNumber)/head:refs/heads/$(params.baseRef)
    - name: depth
      value: "99999999"
    - name: subdirectory
      value: $(context.pipelineRun.name)/simplatform
    workspaces:
     - name: output
       workspace: git-workspace
  - name: get-commit
    taskRef:
      name: get-commit
    runAfter:
    - clone-simplatform
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: repo
      value: simplatform
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  
  # Current Simplatform pipeline does not have maven-gpg equivalent
  # - name: maven-gpg
  #   taskRef:
  #     name: maven-gpg
  #   runAfter:
  #   - clone-simplatform 
  #   params:
  #   - name: context
  #     value: $(context.pipelineRun.name)/simplatform
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace

  - name: maven-build-simplatform-application
    taskRef:
      name: maven-build
    runAfter:
    # - maven-gpg
    - clone-simplatform
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/simplatform/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/main/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/simplatform/repo"
    - name: command
      value: deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: maven-build-simbank-tests
    taskRef:
      name: maven-build
    runAfter:
    - maven-build-simplatform-application
    params:
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simbank-tests
    - name: settingsLocation
      value: /workspace/git/$(context.pipelineRun.name)/simplatform/settings.xml
    - name: buildArgs
      value:
        - "-Dgpg.skip=true"
        - "-Dgalasa.source.repo=https://development.galasa.dev/main/maven-repo/obr"
        - "-Dgalasa.central.repo=https://repo.maven.apache.org/maven2/"
        - "-Dgalasa.release.repo=file:/workspace/git/$(context.pipelineRun.name)/simplatform/repo"
    - name: command
      value: deploy
    workspaces:
     - name: git-workspace
       workspace: git-workspace
  - name: docker-build-simplatform-repo
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - maven-build-simbank-tests
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/simplatform
    - name: dockerfilePath
      value: automation/dockerfiles/simplatform/simplatform-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-simplatform:$(params.headSha)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=baseVersion=latest"
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=branch=main" # Double check this value in future
    workspaces:
      - name: git-workspace
        workspace: git-workspace
  - name: docker-build-simplatform-jar
    taskRef:
      name: docker-build
    runAfter:
    - get-commit
    - docker-build-simplatform-repo
    params:
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: context
      value: $(context.pipelineRun.name)/simplatform/galasa-simplatform-application/galasa-simplatform-3270
    - name: dockerfilePath
      value: automation/dockerfiles/simplatform/simplatform-jar-dockerfile
    - name: imageName
      value: harbor.galasa.dev/galasadev/galasa-simplatform-amd64:$(params.headSha)
    - name: noPush
      value: ""
    - name: buildArgs
      value:
        - "--build-arg=dockerRepository=harbor.galasa.dev"
        - "--build-arg=jdkImage=dockerhub/library/openjdk:11-jdk"
    workspaces:
      - name: git-workspace
        workspace: git-workspace
  finally:
  - name: git-status
    when:
      - input: "$(tasks.git-verify.status)"
        operator: in
        values: ["Succeeded"]
    taskRef:
      name: git-status
    params:
    - name: status
      value: $(tasks.status)
    - name: prUrl
      value: $(params.prUrl)
    - name: statusesUrl
      value: $(params.statusesUrl)
    - name: issueUrl
      value: $(params.issueUrl)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)

  # Commenting out for now, until we decide whether to stay with VolumeClaimTemplate per PRun or go back to PVC
  # - name: git-clean
  #   taskRef: 
  #     name: git-clean
  #   params:
  #   - name: subdirectory
  #     value: $(context.pipelineRun.name)
  #   workspaces:
  #    - name: git-workspace
  #      workspace: git-workspace