#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: recycle-prod1
  namespace: galasa-build
spec:
#
#
#
  params:
  - name: ecosystemNamespace
    type: string
    default: galasa-dev
  - name: api
    type: string
    default: galasa-prod1-api
  - name: engineController
    type: string
    default: galasa-prod1-engine-controller
  - name: resourceMonitor
    type: string
    default: galasa-prod1-resource-monitor
  - name: metrics
    type: string
    default: galasa-prod1-metrics
  - name: webui
    type: string
    default: galasa-prod1-webui
#
#
#
  tasks:
#
#
#
  - name: recycle-api
    taskRef:
      name: kubectl
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/$(params.api)
  - name: wait-api
    taskRef:
      name: kubectl
    runAfter:
    - recycle-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/$(params.api)
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-engine-controller
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/$(params.engineController)
  - name: wait-engine-controller
    taskRef:
      name: kubectl
    runAfter:
    - recycle-engine-controller
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/$(params.engineController)
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-resource-monitor
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/$(params.resourceMonitor)
  - name: wait-resource-monitor
    taskRef:
      name: kubectl
    runAfter:
    - recycle-resource-monitor
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/$(params.resourceMonitor)
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-metrics
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/$(params.metrics)
  - name: wait-metrics
    taskRef:
      name: kubectl
    runAfter:
    - recycle-metrics
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/$(params.metrics)
        - -w
        - --timeout=3m
#
#
#
  - name: recycle-webui
    taskRef:
      name: kubectl
    runAfter:
    - wait-api
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - restart
        - deployment/$(params.webui)
  - name: wait-webui
    taskRef:
      name: kubectl
    runAfter:
    - recycle-webui
    params:
    - name: command
      value: 
        - -n 
        - $(params.ecosystemNamespace)
        - rollout
        - status
        - deployment/$(params.webui)
        - -w
        - --timeout=3m

  finally:
  - name: report-failed-build
    when:
      - input: "$(tasks.status)"
        operator: in
        values: ["Failed"]
    taskRef:
      name: slack-post
    params:
    - name: pipelineName
      value: $(context.pipeline.name)
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    - name: branchFlag
      value: ""
    - name: branch
      value: ""